using System;
using System.Drawing;
using System.Windows.Forms;
using библиотекаСтроителяСред;
using библиотекаИсполнителяПутник;

namespace исполнительПутник_v_2
{
    public partial class изограф : Form
    {
        //построительСред среда;
        темаЗадачи тема = темаЗадачи.операторWhile;
        int номерЗадачиТемы = -1;

        обработкаФайлаОбстановки обработчик = new обработкаФайлаОбстановки();
        Поле обстановка;
        положениеПутника путник;
        решениеЗадачи решение;


        string[] информацияКлетки;

        public изограф()
        {
            InitializeComponent();
        }
        private void изограф_Load(object sender, EventArgs e)
        {

        }
        /// <summary>
        /// Метод вызова соотвествующего построителя среды, по
        /// заданным в меню "Настройка" значением ТЕМЫ и НОМЕРА задачи
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void bСреда_Click(object sender, EventArgs e)
        {
            if (номерЗадачиТемы != -1)
            {

                построительСред среда = new построительСред(тема, номерЗадачиТемы);

                // А нужна ли эта информация ? Может ли ею воспользоваться Путник ?
                // Для отрисовки результатов работы Редактора Среды эта информация излишняя
                //    в особенности о среде, т.к. большинство клеток поля остаются
                //    незадействованными 
                //обстановка = среда.обстановкаСредыПутника;
                //путник = среда.исходноеПоложениеПутника;
            }
            информацияКлетки = обработчик.прочтениеИнформацииОбОбстановке("Inlet.in", out путник, out обстановка);
            // Отрисовка поля среды
            полеСредыЗадачиДляПутника();
            // Отображение начальной ситуации на поле Путника
            обстановкаЗадачиДляПутника();
        }
        /// <summary>
        /// Метод перехода к методу "решениеЗадачи"
        ///   Какой метод вызкать, чтобы по нажатии на данную кнопку
        ///   был выполнен переход в метод "решениеЗадачи" ?
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void bРешение_Click(object sender, EventArgs e)
        {
            /*
            string projectName = "InOutProject";
            if (!Directory.Exists(projectName))
            {
                string projectFile = "project.zip";
                File.WriteAllBytes(projectFile, Properties.Resources.InOutProject);
                ZipFile zip = ZipFile.Read(projectFile);
                zip.ExtractAll(projectName, ExtractExistingFileAction.OverwriteSilently);
                //File.Delete(projectFile);
            }
            Process.Start(string.Format("{0}\\{0}.sln", projectName));
            Status.Text = "Произведен запуск Visual Studio";
             */
            // Повторное формирование среды, если тема и номер не указаны, то решается последняя задача
            //     на старом наборе данных: положении Путника и ситуации на поле
            if (номерЗадачиТемы!=-1)
            {
                построительСред среда = new построительСред(тема, номерЗадачиТемы);                
            }            
            информацияКлетки = обработчик.прочтениеИнформацииОбОбстановке("Inlet.in", out путник, out обстановка);
            // Отрисовка поля среды
            полеСредыЗадачиДляПутника();
            // Отображение начальной ситуации на поле Путника
            обстановкаЗадачиДляПутника();
            // Решение задачи в условиях обновленной обстановки
            решение = new решениеЗадачи();
            информацияКлетки = обработчик.прочтениеИнформацииОбОбстановке("Outlet.out", out путник, out обстановка);
            // Отрисовка поля среды
            полеСредыЗадачиДляПутника();
            // Отображение начальной ситуации на поле Путника
            обстановкаЗадачиДляПутника();
            //MessageBox.Show("Будем повторять проверку ?");
        }
        /// <summary>
        /// Метод запуска на выполнение реализованного метода "решениеЗадачи"
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void bПроверкаРешения_Click(object sender, EventArgs e)
        {
            решение = new решениеЗадачи();
            информацияКлетки = обработчик.прочтениеИнформацииОбОбстановке("Outlet.out", out путник, out обстановка);
            // Отрисовка поля среды
            полеСредыЗадачиДляПутника();
            // Отображение начальной ситуации на поле Путника
            обстановкаЗадачиДляПутника();
        }
        /// <summary>
        /// Метод фиксации темы задачи "Оператор While"
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tSMОператорWhile_Click(object sender, EventArgs e)
        {
            тема = темаЗадачи.операторWhile;
        }
        /// <summary>
        /// Метод фиксации темы "операторы While и If" задач для исполнителя Путник 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void операторыWhileИIf_Click(object sender, EventArgs e)
        {
            тема = темаЗадачи.операторыWhile_и_If;
        }
        /// <summary>
        /// Метод фиксации темы "любыеОператоры" задач для исполнителя Путник  
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void любыеОператоры_Click(object sender, EventArgs e)
        {
            тема = темаЗадачи.любыеОператоры;
        }
        /// <summary>
        /// Метод фиксации номера задачи из окна "НомерЗадачи" 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tSMГотово_Click(object sender, EventArgs e)
        {
            номерЗадачиТемы = int.Parse(tSTBНомерЗадачи.Text);            
        }

        /*
         *    Изобразительная часть класса 
         *    (для результатов работы исполнителя Редактор Среды)
         */
        Bitmap виртуальноеПоле;
        Graphics графика;
        private Pen перо;

        private int колСтолбцов, колСтрок;
        private int размерКлетки = 45;
        // Абсцисса СЗ угла клетки (0, 0)
        private int xCЗугла;
        // Ордината СЗ угла клетки (0, 0)
        private int yСЗугла;
        // Абсцисса ЮВ угла клетки (колСтолбцов, колРядов)
        private int xЮВугла;
        // Ордината ЮВ угла клетки (колСтолбцов, колРядов)
        private int yЮВугла;

        /// <summary>
        /// Отрисовка "чистого" поля
        /// </summary>
        private void полеСредыЗадачиДляПутника()
        {
            виртуальноеПоле = new Bitmap(полеПутника.Width, полеПутника.Height);
            графика = Graphics.FromImage(виртуальноеПоле);

            this.колСтолбцов = обстановка.ширинаПоля;
            this.колСтрок = обстановка.высотаПоля;
            xCЗугла = 25;
            yСЗугла = 25;
            xЮВугла = xCЗугла + колСтолбцов * размерКлетки;
            yЮВугла = yСЗугла + колСтрок * размерКлетки;
            {
                графика.FillRectangle(Brushes.ForestGreen, ClientRectangle);
                using (перо = new Pen(Color.Yellow))
                {
                    перо.Width = 1;
                    графика.IntersectClip(ClientRectangle);
                    int y = yСЗугла;
                    int xНач = xCЗугла, xКон = xCЗугла + колСтолбцов * размерКлетки;
                    for (int номерГоризонтали = 0; номерГоризонтали < колСтрок + 1; ++номерГоризонтали)
                    {
                        графика.DrawLine(перо, xНач, y, xКон, y);
                        y += размерКлетки;
                    }
                    int x = xCЗугла;
                    int yНач = yСЗугла, yКон = yСЗугла + колСтрок * размерКлетки;
                    for (int номерВертикали = 0; номерВертикали < колСтолбцов + 1; ++номерВертикали)
                    {
                        графика.DrawLine(перо, x, yНач, x, yКон);
                        x += размерКлетки;
                    }
                    перо.Width = 4;
                    графика.DrawLine(перо, xCЗугла - 2, yСЗугла, xЮВугла + 2, yСЗугла);
                    графика.DrawLine(перо, xCЗугла, yСЗугла - 2, xCЗугла, yЮВугла + 2);
                    графика.DrawLine(перо, xCЗугла - 2, yЮВугла, xЮВугла + 2, yЮВугла);
                    графика.DrawLine(перо, xЮВугла, yСЗугла - 2, xЮВугла, yЮВугла + 2);
                }
            }
            полеПутника.Image = виртуальноеПоле;
        }
        /// <summary>
        /// Отрисовка ситуации задачи на поле Путника 
        /// </summary>
        public void обстановкаЗадачиДляПутника()
        {
            // Все Путники - невидимые
            инициализацияПутника();
            // Отображение обстановки
            отображениеОбстановки(информацияКлетки);
            // На заранее отрисованном поле устанавливиется Путник
            установитьПутника();
        }
        /// <summary>
        /// Метод инициализации видимости объектов Путник всех ориентаций
        /// </summary>
        private void инициализацияПутника()
        {
            pBПутникС.Visible = false;
            pBПутникВ.Visible = false;
            pBПутникЮ.Visible = false;
            pBПутникЗ.Visible = false;
        }
        /// <summary>
        /// Метод размещения на поле Путника
        /// </summary>
        /// <param name="путникМестоположение">-структура - хранитель информации о начальном положении 
        /// и ориентации Путника</param>
        private void установитьПутника()
        {
            // "; Traveller position: x, y, Orientation"
            int колонкаПутника = путник.координатаX;
            int рядПутника = путник.координатаY;

            int xЦентраP = xCЗугла + колонкаПутника * размерКлетки + размерКлетки / 2;
            int yЦентраP = yСЗугла + рядПутника * размерКлетки + размерКлетки / 2;
            switch (путник.ориентация)
            {
                case ориентацияПутника.наВосток:
                    pBПутникВ.Left = xЦентраP - 16;
                    // pBПутникВ.Top = yЦентраP + pBПутникВ.Height + 2;
                    pBПутникВ.Top = yЦентраP - pBПутникВ.Height / 2;
                    //  pBПутникВ.Visible = true;
                    графика.DrawImage(pBПутникВ.Image, pBПутникВ.Left, pBПутникВ.Top, pBПутникВ.Width, pBПутникВ.Height);
                    break;
                case ориентацияПутника.наЗапад:
                    pBПутникЗ.Left = xЦентраP - 16;
                    pBПутникЗ.Top = yЦентраP - pBПутникВ.Height / 2;
                    //  pBПутникЗ.Top = yЦентраP + pBПутникВ.Height + 2;
                    графика.DrawImage(pBПутникЗ.Image, pBПутникЗ.Left, pBПутникЗ.Top, pBПутникЗ.Width, pBПутникЗ.Height);
                    //  pBПутникЗ.Visible = true;
                    break;
                case ориентацияПутника.наСевер:
                    pBПутникС.Left = xЦентраP - 16;
                    pBПутникС.Top = yЦентраP - pBПутникВ.Height / 2;
                    //   pBПутникС.Top = yЦентраP + pBПутникВ.Height + 2;
                    графика.DrawImage(pBПутникС.Image, pBПутникС.Left, pBПутникС.Top, pBПутникС.Width, pBПутникС.Height);
                    //   pBПутникС.Visible = true;
                    break;
                case ориентацияПутника.наЮг:
                    pBПутникЮ.Left = xЦентраP - 16;
                    pBПутникЮ.Top = yЦентраP - pBПутникВ.Height / 2;
                    //  pBПутникЮ.Top = yЦентраP + pBПутникВ.Height + 2;
                    графика.DrawImage(pBПутникЮ.Image, pBПутникЮ.Left, pBПутникЮ.Top, pBПутникЮ.Width, pBПутникЮ.Height);
                    //   pBПутникЮ.Visible = true;
                    break;
                default:
                    throw new Exception("Сбой! Такой ориентации нет!");
            }
        }
        /// <summary>
        /// Метод отображения обстановки на поле Путника
        /// </summary>
        /// <param name="массивКодовИнформативныхКлетокПоля">-массив строк - кодов информативных клеток поля</param>
        private void отображениеОбстановки(string[] массивКодовИнформативныхКлетокПоля)
        {
            char[] разделители = { ' ' };
            for (int i = 0; i < массивКодовИнформативныхКлетокПоля.Length; i++)
            {
                string[] характеристикиКлетки = массивКодовИнформативныхКлетокПоля[i].Split(разделители, System.StringSplitOptions.RemoveEmptyEntries);
                //******************************************************
                // 0, 1 Выделение координат                            *
                //******************************************************
                int колонка = int.Parse(характеристикиКлетки[0]);
                int ряд = int.Parse(характеристикиКлетки[1]);

                int xСЗуглаКлетки = xCЗугла + колонка * размерКлетки;
                int yСЗуглаКлетки = yСЗугла + ряд * размерКлетки;


                //******************************************************
                // 2    Выделение цвета закраски (!=0)                 *
                //******************************************************
                гаммаЦветов цвет = (гаммаЦветов)(int.Parse(характеристикиКлетки[3]));
                Rectangle областьЗакраски = new Rectangle(xСЗуглаКлетки + размерКлетки / 2 - 19, yСЗуглаКлетки + 3, 40, 40);
                закраскаКлетки закрасить = new закраскаКлетки(графика, цвет, областьЗакраски);

                //******************************************************
                // 3    Выделение наличия препятствия (== 1)           *
                //******************************************************
                if (характеристикиКлетки[2] == "1")   // В данной клетке поля поставить препятствие
                {
                    pBПрепятствиеК.Left = xСЗуглаКлетки - размерКлетки / 2 + 24;
                    pBПрепятствиеК.Top = yСЗуглаКлетки - размерКлетки / 2 + 24;
                    графика.DrawImage(pBПрепятствиеК.Image, pBПрепятствиеК.Left, pBПрепятствиеК.Top, pBПрепятствиеК.Width, pBПрепятствиеК.Height);
                }
                //******************************************************            
                // 4    Выделение верхнего символа (!=$)               *
                //******************************************************
                if (характеристикиКлетки[4] != "$")
                {
                    Rectangle верхСимвол = new Rectangle(xСЗуглаКлетки + 3, yСЗуглаКлетки + 3, 17, 15);
                    графика.DrawString(характеристикиКлетки[4].ToString(), Font, Brushes.White, верхСимвол);
                }
                //******************************************************
                // 5    Выделение нижнего символа (!=$)                *
                //******************************************************
                if (характеристикиКлетки[5] != "$")
                {
                    Rectangle нижСимвол = new Rectangle(xСЗуглаКлетки + 3, yСЗуглаКлетки + размерКлетки - 22, 17, 15);
                    графика.DrawString(характеристикиКлетки[5].ToString(), Font, Brushes.White, нижСимвол);
                }
                // Если массив "характеристикиКлетки" содержит 7 элементов - то последний -
                //    символ "точка" - конечная точка исполнителя Путник
                if (характеристикиКлетки.Length > 6)
                {
                    if (характеристикиКлетки[6] == "1")
                    {
                        графика.FillEllipse(Brushes.Red, xСЗуглаКлетки + размерКлетки - 7, yСЗуглаКлетки + размерКлетки - 7, 6, 6);
                    }
                }
            }
        }
        private void полеПутника_Click(object sender, EventArgs e)
        {
        }
    }
}
