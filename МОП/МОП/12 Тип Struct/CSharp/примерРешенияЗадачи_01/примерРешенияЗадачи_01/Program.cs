using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace примерРешенияЗадачи_01
{
    /*
     *    В ходе решения задачи необходимо описать и использовать структуру (запись) с именем
     *  Студент (Student), содержащую следующие поля :
     *      – Фамилия_инициалы;
     *      –Успеваемость (массив из пяти элементов).
     *    Текстовый файл Inlet.in содержит информацию о результатах сессии, характеризующуюся фамилиями и инициалами студентов и 
     *  наборами оценок, полученных в текущей сессии.
     *    Написать программу, которая считывает всю информацию из файла, выводит в выходной текстовый файл Outlet.out 
     *  список студентов, упорядоченный по алфавиту (по одной фамилии с инициалами в строку), а затем, 
     *  количество тех студентов, которые сдали сессию без "завалов"(т.е. не получили ни одной оценки ниже 4).
     *  
     *      Спецификация ввода (файл Inlet.in):
     *         Фамилия_инициалы 1-го студента
     *         пять оценок (через пробел) 1-го студента
     *         Фамилия_инициалы 2-го студента
     *         пять оценок (через пробел) 2-го студента
     *         . . . . . . . . . . . . . . . . . . . . .
     *         Фамилия_инициалы k-го студента
     *         пять оценок (через пробел) k-го студента
     *         
     *     Спецификация вывода (файл Outlet.out):
     *         Список всех студентов, (по одному в строке, в алфавитном порядке)
     *         Количество "успевающих студентов"
     */
    class Program
    {
        struct Студент
        {
            string ФИО;
            int[] успеваемость;
            /// <summary>
            /// Свойство для чтения/записи Фамилии и инициалов студента
            /// </summary>
            public string Фамилия_инициалы
            {
                get
                {
                    return ФИО;
                }
                set
                {
                    ФИО = value;
                }
            }
            /// <summary>
            /// Свойство по-записи для фиксации результатов сессии
            /// </summary>
            public int[] результатыСессии
            {
                set
                {
                    успеваемость = new int[5];
                    успеваемость = value;
                }
            }
            /// <summary>
            /// Свойство по чтению отвечающее на вопрос о наличии хотя бы одной 
            ///         неудовлетворительной оценки
            /// </summary>
            public bool естьНеудовлетворительныеОценки
            {
                get
                {
                    bool есть = false;
                    foreach (int оценка in успеваемость)
                    {
                        есть = есть || оценка < 4;
                    }
                    return есть;
                }
            }
        }

        static StreamReader файлВВ = new StreamReader("2.in");
        static StreamWriter файлЫВ = new StreamWriter("Outlet.out");

        static void Main(string[] args)
        {
            Студент[] группа;
            int количествоУспевающих;
            вводДанных(out группа);
            количествоУспевающих = решениеЗадачи(ref группа);
            выводДанных(группа, количествоУспевающих);
        }
        static int количествоСтудентов(string текст)
        {
            int количество = 0, индексКонцаСтроки = текст.IndexOf("\r\n");
            while (индексКонцаСтроки != -1)
            {
                количество++;
                индексКонцаСтроки = текст.IndexOf("\r\n", индексКонцаСтроки + 1);
            }
            return количество/2;

        }
        static void вводДанных(out Студент[] группа)
        {
            string текст = файлВВ.ReadToEnd();
            int колСтудентов = количествоСтудентов(текст);
            группа = new Студент[колСтудентов];
            int позКонСтроки;
            string[] оценки;
            int[] Оц;
            for (int номер = 0; номер < колСтудентов; номер++)
            {
                позКонСтроки = текст.IndexOf("\r\n");
                // Прочтение ФИО
                группа[номер].Фамилия_инициалы = текст.Substring(0, позКонСтроки).Trim();
                текст = текст.Remove(0, позКонСтроки + 2);                    // Удаление строки с ФИО номер-студента
                // Прочтение результатов сессии номер-студента
                позКонСтроки = текст.IndexOf("\r\n");
                оценки = текст.Substring(0, позКонСтроки).Trim().Split(' ');
                текст = текст.Remove(0, позКонСтроки + 2);                    // Удаление строки с оценками номер-студента
                Оц = new int[5];
                for (int i = 0; i < 5; i++)
                {
                    Оц[i] = int.Parse(оценки[i]);                    
                }
                группа[номер].результатыСессии = Оц;
            }
        }
        static int решениеЗадачи(ref Студент[] группа)
        {   
            int номерПервого;
            int колУспевающих=0;
            Студент обменнаяЗапись;
            for (int i = 0; i < группа.Length-1; i++)
            {
                номерПервого = номерПервого_в_Подсписке(i, группа);
                обменнаяЗапись = группа[i];
                группа[i] = группа[номерПервого];
                колУспевающих += !группа[i].естьНеудовлетворительныеОценки ? 1 : 0;
                группа[номерПервого] = обменнаяЗапись;
            }
            колУспевающих += !группа[группа.Length - 1].естьНеудовлетворительныеОценки ? 1 : 0;
            return колУспевающих;
        }
        static int номерПервого_в_Подсписке(int нач, Студент[] группа)
        {
            char[] первый = группа[нач].Фамилия_инициалы.ToCharArray();
            int номер = нач;
            for (int i = нач+1;  i < группа.Length;  i++)
            {
                char[] ФИО = группа[i].Фамилия_инициалы.ToCharArray();
                if (!меньше(первый, ФИО))
                {
                    номер = i;
                    первый = ФИО;
                }
            }
            return номер;
        }
        static bool меньше(char[] a, char[] b)
        {  // Реализация сравнения строковых величин, т.к. над типом string операция "<" - не определена
            int результат = a[0] == b[0] ? 0 : (a[0] < b[0] ? 1 : 2);
            int длина = Math.Min(a.Length, b.Length);
            int i = 1;
            while (результат==0 && i<длина)
            {
                результат = a[i] == b[i] ? 0 : (a[i] < b[i] ? 1 : 2);
                i++;
            }
            return (результат == 1) || (результат == 0 && a.Length < b.Length);
        }
        static void выводДанных(Студент[] группа, int количество)
        {
            foreach (Студент студент in группа)
            {
                файлЫВ.WriteLine(студент.Фамилия_инициалы);
            }
            файлЫВ.Write(количество);
            файлЫВ.Close();
        }
    }
}
